package com.ike.sq.alliance.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ike.sq.alliance.bean.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SenderName = new Property(1, String.class, "senderName", false, "senderName");
        public final static Property SenderId = new Property(2, String.class, "senderId", false, "senderId");
        public final static Property SenderHeadPath = new Property(3, String.class, "senderHeadPath", false, "senderHeadPath");
        public final static Property Content = new Property(4, String.class, "content", false, "content");
        public final static Property MsgCategory = new Property(5, String.class, "msgCategory", false, "msgCategory");
        public final static Property MsgType = new Property(6, String.class, "msgType", false, "msgType");
        public final static Property Group = new Property(7, String.class, "group", false, "group");
        public final static Property Receiver = new Property(8, String.class, "receiver", false, "receiver");
        public final static Property UserId = new Property(9, String.class, "userId", false, "userId");
        public final static Property Read = new Property(10, boolean.class, "read", false, "read");
        public final static Property Type = new Property(11, int.class, "type", false, "type");
        public final static Property Time = new Property(12, String.class, "time", false, "time");
        public final static Property UserVoiceTime = new Property(13, float.class, "userVoiceTime", false, "UserVoiceTime");
        public final static Property UserVoicePath = new Property(14, String.class, "userVoicePath", false, "UserVoicePath");
        public final static Property UserVoiceUrl = new Property(15, String.class, "userVoiceUrl", false, "UserVoiceUrl");
        public final static Property SendState = new Property(16, int.class, "sendState", false, "sendState");
        public final static Property ImageUrl = new Property(17, String.class, "imageUrl", false, "imageUrl");
        public final static Property ImageIconUrl = new Property(18, String.class, "imageIconUrl", false, "imageIconUrl");
        public final static Property ImageLocal = new Property(19, String.class, "imageLocal", false, "imageLocal");
        public final static Property FriendId = new Property(20, String.class, "friendId", false, "friendId");
    }


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"senderName\" TEXT," + // 1: senderName
                "\"senderId\" TEXT," + // 2: senderId
                "\"senderHeadPath\" TEXT," + // 3: senderHeadPath
                "\"content\" TEXT," + // 4: content
                "\"msgCategory\" TEXT," + // 5: msgCategory
                "\"msgType\" TEXT," + // 6: msgType
                "\"group\" TEXT," + // 7: group
                "\"receiver\" TEXT," + // 8: receiver
                "\"userId\" TEXT," + // 9: userId
                "\"read\" INTEGER NOT NULL ," + // 10: read
                "\"type\" INTEGER NOT NULL ," + // 11: type
                "\"time\" TEXT," + // 12: time
                "\"UserVoiceTime\" REAL NOT NULL ," + // 13: userVoiceTime
                "\"UserVoicePath\" TEXT," + // 14: userVoicePath
                "\"UserVoiceUrl\" TEXT," + // 15: userVoiceUrl
                "\"sendState\" INTEGER NOT NULL ," + // 16: sendState
                "\"imageUrl\" TEXT," + // 17: imageUrl
                "\"imageIconUrl\" TEXT," + // 18: imageIconUrl
                "\"imageLocal\" TEXT," + // 19: imageLocal
                "\"friendId\" TEXT);"); // 20: friendId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(2, senderName);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String senderHeadPath = entity.getSenderHeadPath();
        if (senderHeadPath != null) {
            stmt.bindString(4, senderHeadPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String msgCategory = entity.getMsgCategory();
        if (msgCategory != null) {
            stmt.bindString(6, msgCategory);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(7, msgType);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(8, group);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(9, receiver);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
        stmt.bindLong(11, entity.getRead() ? 1L: 0L);
        stmt.bindLong(12, entity.getType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(13, time);
        }
        stmt.bindDouble(14, entity.getUserVoiceTime());
 
        String userVoicePath = entity.getUserVoicePath();
        if (userVoicePath != null) {
            stmt.bindString(15, userVoicePath);
        }
 
        String userVoiceUrl = entity.getUserVoiceUrl();
        if (userVoiceUrl != null) {
            stmt.bindString(16, userVoiceUrl);
        }
        stmt.bindLong(17, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(18, imageUrl);
        }
 
        String imageIconUrl = entity.getImageIconUrl();
        if (imageIconUrl != null) {
            stmt.bindString(19, imageIconUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(20, imageLocal);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(21, friendId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(2, senderName);
        }
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(3, senderId);
        }
 
        String senderHeadPath = entity.getSenderHeadPath();
        if (senderHeadPath != null) {
            stmt.bindString(4, senderHeadPath);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String msgCategory = entity.getMsgCategory();
        if (msgCategory != null) {
            stmt.bindString(6, msgCategory);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(7, msgType);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(8, group);
        }
 
        String receiver = entity.getReceiver();
        if (receiver != null) {
            stmt.bindString(9, receiver);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
        stmt.bindLong(11, entity.getRead() ? 1L: 0L);
        stmt.bindLong(12, entity.getType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(13, time);
        }
        stmt.bindDouble(14, entity.getUserVoiceTime());
 
        String userVoicePath = entity.getUserVoicePath();
        if (userVoicePath != null) {
            stmt.bindString(15, userVoicePath);
        }
 
        String userVoiceUrl = entity.getUserVoiceUrl();
        if (userVoiceUrl != null) {
            stmt.bindString(16, userVoiceUrl);
        }
        stmt.bindLong(17, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(18, imageUrl);
        }
 
        String imageIconUrl = entity.getImageIconUrl();
        if (imageIconUrl != null) {
            stmt.bindString(19, imageIconUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(20, imageLocal);
        }
 
        String friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindString(21, friendId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // senderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // senderHeadPath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // msgCategory
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // msgType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // group
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiver
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.getShort(offset + 10) != 0, // read
            cursor.getInt(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // time
            cursor.getFloat(offset + 13), // userVoiceTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // userVoicePath
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // userVoiceUrl
            cursor.getInt(offset + 16), // sendState
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // imageUrl
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // imageIconUrl
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // imageLocal
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // friendId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSenderName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSenderHeadPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgCategory(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMsgType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroup(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiver(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRead(cursor.getShort(offset + 10) != 0);
        entity.setType(cursor.getInt(offset + 11));
        entity.setTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUserVoiceTime(cursor.getFloat(offset + 13));
        entity.setUserVoicePath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUserVoiceUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSendState(cursor.getInt(offset + 16));
        entity.setImageUrl(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setImageIconUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setImageLocal(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFriendId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
